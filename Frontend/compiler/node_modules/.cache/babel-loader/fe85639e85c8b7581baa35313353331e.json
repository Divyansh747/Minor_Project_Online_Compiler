{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://0.0.0.0:8080';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeJwtAuthenticationService(email, password) {\n    console.log(email);\n    return axios.post(`${API_URL}/authenticate`, {\n      email,\n      password\n    }).catch(console.log(\"FAILED\"));\n  }\n\n  registerSuccessfulLoginForJwt(email, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, email);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/root/SVVV_6SEM/MinorProject/React/course/compiler/src/Service/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeJwtAuthenticationService","email","password","console","log","post","catch","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","setupAxiosInterceptors","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,qBAAhB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,+BAA+B,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAC7CC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,WAAOL,KAAK,CAACS,IAAN,CAAY,GAAER,OAAQ,eAAtB,EAAsC;AACzCI,MAAAA,KADyC;AAEzCC,MAAAA;AAFyC,KAAtC,EAGJI,KAHI,CAIHH,OAAO,CAACC,GAAR,CAAY,QAAZ,CAJG,CAAP;AAMH;;AAEDG,EAAAA,6BAA6B,CAACN,KAAD,EAAQO,KAAR,EAAe;AACxCC,IAAAA,cAAc,CAACC,OAAf,CAAuBZ,gCAAvB,EAAyDG,KAAzD;AACA,SAAKU,sBAAL,CAA4B,KAAKC,cAAL,CAAoBJ,KAApB,CAA5B;AACH;;AAEDI,EAAAA,cAAc,CAACJ,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAGDK,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0BhB,gCAA1B;AACH;;AAEDiB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBnB,gCAAvB,CAAX;AACA,QAAIkB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBnB,gCAAvB,CAAX;AACA,QAAIkB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACH,KAAD,EAAQ;AAC1BZ,IAAAA,KAAK,CAACuB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKP,cAAL,EAAJ,EAA2B;AACvBO,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BhB,KAA/B;AACH;;AACD,aAAOc,MAAP;AACH,KANL;AAQH;;AA9CuB;;AAiD5B,eAAe,IAAIvB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'http://0.0.0.0:8080'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n    executeJwtAuthenticationService(email, password) {\n        console.log(email);\n        return axios.post(`${API_URL}/authenticate`, {\n            email,\n            password\n        }).catch(\n            console.log(\"FAILED\")\n        )\n    }\n\n    registerSuccessfulLoginForJwt(email, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, email)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}